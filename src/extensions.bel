(def tabref2 (tab key (o default))
   (ifwhere (cdr:tabloc tab key) (tabref tab key)))

(vir tab (f args)
  `(tabref2 ,f ,@args))

(set natives nil)

(mac native (name code)
  `(unless (isa!native ,code) (set natives (put ',name ,code natives))))

(vir native (f args)
  `(,(cdr (get (caddr f) natives)) ,@args))

(native set
  (macro args
    (cons 'do
          (map (fn ((p (o e t)))
                 (letu v
                   `(atomic (let ,v ,e
                              (let (cell loc) (where ,p t)
                                ((case loc a xar d xdr) cell ,v))))))
               (hug args)))))

(mac def (n . rest)
  `(set ,n (fn ,@rest)))

(mac mac (n . rest)
  `(set ,n (macro ,@rest)))
